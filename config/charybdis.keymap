/*
 * Enhanced ZMK config for Charybdis 4x6
 * With extended trackball support and optimized layers
 * Copyright (c) 2023-2024 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/ext_power.h>

/* Input event definitions */
#define INPUT_EV_KEY 0x01
#define INPUT_EV_REL 0x02
#define INPUT_EV_ABS 0x03
#define INPUT_EV_MSC 0x04
#define INPUT_EV_VENDOR_START 0xf0
#define INPUT_EV_VENDOR_STOP 0xff

#define INPUT_REL_X 0x00
#define INPUT_REL_Y 0x01
#define INPUT_REL_WHEEL 0x08
#define INPUT_REL_HWHEEL 0x06
#define INPUT_REL_MISC 0x09

/* Keyboard layers */
#define BASE 0      // Base layer (Colemak-DH)
#define LOWER 1     // Numbers, F-keys and math
#define SYMB 2      // Symbols and special keys
#define NAV 3       // Navigation and multimedia
#define IDE 4       // IDE and programming layer
#define ADJUST 5    // Settings and system functions
#define QWERTY 6    // QWERTY layer
#define GAMING 7    // Gaming layer
#define MOUSE 8     // Mouse layer
#define SCROLL 9    // Scroll layer
#define SNIPE 10    // Precision aiming layer



/* Optimized global settings */
&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "balanced";
    retro-tap;
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "balanced";
    retro-tap;
};

&sk {
    release-after-ms = <1800>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {
    combos {
        compatible = "zmk,combos";
        
        /* Combo for scroll mode activation */
        combo_scroll_mode {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&tog SCROLL>;
            layers = <BASE LOWER SYMB NAV IDE>;
        };
        
        /* Combo for precision mode activation */
        combo_snipe_mode {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&mo SNIPE>;
            layers = <BASE LOWER SYMB NAV IDE>;
        };
        
        /* Quick switching between modes */
        combo_reset_mouse_modes {
            timeout-ms = <50>;
            key-positions = <40 43>;
            bindings = <&to BASE>;
            layers = <SCROLL SNIPE MOUSE>;
        };
        
        /* Main combos */
        combo_esc {
            timeout-ms = <40>;
            key-positions = <13 14>;
            bindings = <&kp ESC>;
            layers = <BASE QWERTY>;
        };
        
        combo_tab {
            timeout-ms = <40>;
            key-positions = <25 26>;
            bindings = <&kp TAB>;
            layers = <BASE QWERTY>;
        };
        
        combo_enter {
            timeout-ms = <40>;
            key-positions = <33 34>;
            bindings = <&kp ENTER>;
            layers = <BASE QWERTY>;
        };
        
        combo_del {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp DEL>;
            layers = <BASE QWERTY>;
        };
        
        /* Brackets */
        combo_lpar {
            timeout-ms = <40>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <BASE QWERTY>;
        };
        
        combo_rpar {
            timeout-ms = <40>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <BASE QWERTY>;
        };
        
        combo_lbkt {
            timeout-ms = <40>;
            key-positions = <3 4>;
            bindings = <&kp LBKT>;
            layers = <BASE QWERTY>;
        };
        
        combo_rbkt {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp RBKT>;
            layers = <BASE QWERTY>;
        };
        
        combo_lbrc {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp LBRC>;
            layers = <BASE QWERTY>;
        };
        
        combo_rbrc {
            timeout-ms = <40>;
            key-positions = <31 32>;
            bindings = <&kp RBRC>;
            layers = <BASE QWERTY>;
        };
        
        /* Special functions */
        combo_caps_word {
            timeout-ms = <40>;
            key-positions = <16 19>;
            bindings = <&caps_word>;
            layers = <BASE QWERTY>;
        };
        
        /* Editing */
        combo_cut {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp LC(X)>;
            layers = <BASE QWERTY>;
        };
        
        combo_copy {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp LC(C)>;
            layers = <BASE QWERTY>;
        };
        
        combo_paste {
            timeout-ms = <40>;
            key-positions = <28 29>;
            bindings = <&kp LC(V)>;
            layers = <BASE QWERTY>;
        };
        
        combo_undo {
            timeout-ms = <40>;
            key-positions = <25 27>;
            bindings = <&kp LC(Z)>;
            layers = <BASE QWERTY>;
        };
        
        combo_redo {
            timeout-ms = <40>;
            key-positions = <25 28>;
            bindings = <&kp LC(LS(Z))>;
            layers = <BASE QWERTY>;
        };
        
        /* Special layers */
        combo_mouse {
            timeout-ms = <50>;
            key-positions = <40 41>;
            bindings = <&tb_mode>;
            layers = <BASE>;
        };
        
        /* IDE functions */
        combo_ide {
            timeout-ms = <40>;
            key-positions = <14 15>;
            bindings = <&dt_ide>;
            layers = <BASE>;
        };
        
        combo_comment {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&comment_line>;
            layers = <BASE QWERTY IDE>;
        };
        
        combo_duplicate {
            timeout-ms = <40>;
            key-positions = <28 30>;
            bindings = <&duplicate_line>;
            layers = <BASE QWERTY IDE>;
        };
        
        /* Common programming symbols */
        combo_arrow {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&arrow_macro>;
            layers = <BASE QWERTY>;
        };
        
        combo_fat_arrow {
            timeout-ms = <40>;
            key-positions = <32 33>;
            bindings = <&fat_arrow_macro>;
            layers = <BASE QWERTY>;
        };
        
        combo_triple_equals {
            timeout-ms = <40>;
            key-positions = <9 10>;
            bindings = <&triple_equals>;
            layers = <BASE QWERTY>;
        };
        
        combo_not_equals {
            timeout-ms = <40>;
            key-positions = <8 9>;
            bindings = <&not_equals>;
            layers = <BASE QWERTY>;
        };

        
        /* Special functions */
        combo_select_all {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&select_all>;
            layers = <BASE QWERTY>;
        };
        
        combo_select_line {
            timeout-ms = <40>;
            key-positions = <25 26 27>;
            bindings = <&select_line>;
            layers = <BASE QWERTY>;
        };
    };
    
    /* Conditional layers */
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER SYMB>;
            then-layer = <ADJUST>;
        };
    };

    behaviors {
        /* Tap Dance for trackball mode switching */
        tb_mode: trackball_mode {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&tog MOUSE>, <&tog SCROLL>, <&tog SNIPE>;
        };

        /* Enhanced home row mods with context-dependent modifiers */
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 42 43>;
            hold-trigger-on-release;
            global-quick-tap;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            global-quick-tap;
        };
        


        /* Enhanced Sticky Shift */
        ss: sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };
        
        /* Smart layer/key */
        smart_layer: smart_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
            retro-tap;
        };

        /* Smart layer switcher */
        smart_to: smart_to_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            bindings = <&to>, <&to>;
        };

        /* Tap Dance for multiple functions */
        dt_lang: tap_dance_language {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&lang_switch>, <&to QWERTY>, <&to GAMING>;
        };
        
        dt_shift: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&ss LSHFT>, <&caps_word>, <&kp CAPS>;
        };

        /* Quick access to IDE functions */
        dt_ide: tap_dance_ide {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mo IDE>, <&tog IDE>;
        };

        /* Mod morphs for symbols */
        comma_semi: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        slash_qmark: slash_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        excl_pipe: exclamation_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /* Mod morph for semicolon and colon */
        semi_colon: semicolon_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /* Mod morph for brackets */
        lpar_lt: left_paren_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        rpar_gt: right_paren_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        /* Adaptive tabulation */
        tab_esc: tab_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp ESC>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        /* Automatic exit from editing */
        vim_exit: vim_exit_macro {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&vim_save>, <&vim_exit_insert>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };



        /* Enhanced window management */
        win_mgmt: window_management {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&win_max>, <&win_full>, <&win_reset>;
        };
        
        /* Smart language switching */
        smart_lang: smart_language {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&lang_switch>, <&none>, <&to BASE>;
        };
        
        /* Context-dependent space */
        spc_mod: space_modifier {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        /* Quick switching between programming layers */
        dev_cycle: developer_cycle {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mo IDE>, <&to IDE>, <&to BASE>;
        };
    };



    /* Macros for various functions */
    macros {
        /* Language switching */
        lang_switch: lang_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI>,
                    <&macro_tap &kp SPACE>,
                    <&macro_release &kp LGUI>;
        };


        /* Screen lock macOS/Windows */
        lock_screen: lock_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI &kp LCTRL>,
                       <&macro_tap &kp Q>,
                       <&macro_release &kp LGUI &kp LCTRL>;
        };

        /* Desktop navigation */
        next_desktop: next_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL>,
                       <&macro_tap &kp RIGHT>,
                       <&macro_release &kp LCTRL>;
        };

        prev_desktop: prev_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL>,
                       <&macro_tap &kp LEFT>,
                       <&macro_release &kp LCTRL>;
        };

        /* Enhanced window management */
        win_max: window_maximize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_tap &kp UP>,
                       <&macro_release &kp LGUI>;
        };

        win_full: window_fullscreen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL &kp LGUI>,
                       <&macro_tap &kp F>,
                       <&macro_release &kp LCTRL &kp LGUI>;
        };

        win_reset: window_reset {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_tap &kp DOWN>,
                       <&macro_release &kp LGUI>;
        };

        win_left: window_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_tap &kp LEFT>,
                       <&macro_release &kp LGUI>;
        };

        win_right: window_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI>,
                       <&macro_tap &kp RIGHT>,
                       <&macro_release &kp LGUI>;
        };

        /* Enhanced screenshots */
        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>,
                       <&macro_tap &kp S>,
                       <&macro_release &kp LGUI &kp LSHFT>;
        };

        screenshot_full: screenshot_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LGUI &kp LSHFT>,
                       <&macro_tap &kp N3>,
                       <&macro_release &kp LGUI &kp LSHFT>;
        };

        /* Enhanced selection actions */
        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL>,
                       <&macro_tap &kp RIGHT>,
                       <&macro_press &kp LSHFT>,
                       <&macro_tap &kp LEFT>,
                       <&macro_release &kp LCTRL &kp LSHFT>;
        };
        
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp HOME>,
                       <&macro_press &kp LSHFT>,
                       <&macro_tap &kp END>,
                       <&macro_release &kp LSHFT>;
        };

        select_all: select_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL>,
                       <&macro_tap &kp A>,
                       <&macro_release &kp LCTRL>;
        };

        /* Extended programming symbols */
        arrow_macro: arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp MINUS &kp GT>;
        };
        
        fat_arrow_macro: fat_arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp EQUAL &kp GT>;
        };

        triple_equals: triple_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp EQUAL &kp EQUAL &kp EQUAL>;
        };

        not_equals: not_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp EXCL &kp EQUAL>;
        };

        not_equals_strict: not_equals_strict {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp EXCL &kp EQUAL &kp EQUAL>;
        };
        
        /* Vim commands */
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp ESC>,
                       <&macro_tap &kp COLON>,
                       <&macro_tap &kp W>,
                       <&macro_tap &kp ENTER>;
        };

        vim_exit_insert: vim_exit_insert {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp ESC>;
        };

        vim_save_quit: vim_save_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp ESC>,
                       <&macro_tap &kp COLON>,
                       <&macro_tap &kp W>,
                       <&macro_tap &kp Q>,
                       <&macro_tap &kp ENTER>;
        };

        /* Copy/paste actions */
        copy_line: copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp HOME>,
                       <&macro_press &kp LSHFT>,
                       <&macro_tap &kp END>,
                       <&macro_release &kp LSHFT>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp C>,
                       <&macro_release &kp LCTRL>;
        };

        duplicate_line: duplicate_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp HOME>,
                       <&macro_press &kp LSHFT>,
                       <&macro_tap &kp END>,
                       <&macro_release &kp LSHFT>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp C>,
                       <&macro_release &kp LCTRL>,
                       <&macro_tap &kp END>,
                       <&macro_tap &kp ENTER>,
                       <&macro_press &kp LCTRL>,
                       <&macro_tap &kp V>,
                       <&macro_release &kp LCTRL>;
        };

        /* Programming */
        comment_line: comment_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LCTRL>,
                       <&macro_tap &kp FSLH>,
                       <&macro_release &kp LCTRL>;
        };

        indent_line: indent_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_tap &kp TAB>;
        };

        outdent_line: outdent_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&macro_press &kp LSHFT>,
                       <&macro_tap &kp TAB>,
                       <&macro_release &kp LSHFT>;
        };
    };

    /* Layouts for different layers */
    keymap {
        compatible = "zmk,keymap";

        /* Base layer (Colemak-DH) */
        BASE {
            bindings = <
&kp GRAVE              &kp N1                 &kp N2                 &kp N3                 &kp N4                 &kp N5                                                             &kp N6                 &kp N7                 &kp N8                 &kp N9                 &kp N0                 &lock_screen
&tab_esc               &kp B                  &kp Y                  &kp O                  &kp U                  &kp SQT                                                            &slash_qmark           &kp L                  &kp D                  &kp W                  &kp V                  &kp Z
&mt LCTRL ESC         &hml LGUI C            &hml LALT I            &hml LCTRL E           &hml LSHFT A           &comma_semi                                                        &dot_colon             &hmr RSHFT H           &hmr RCTRL T           &hmr RALT S            &hmr RGUI N            &kp Q
&dt_shift              &kp G                  &kp X                  &kp J                  &kp K                  &excl_pipe                                                         &semi_colon            &kp R                  &kp M                  &kp F                  &kp P                  &mt RSHFT ENTER
                                                                     &dt_lang               &smart_layer LOWER SPACE &kp LGUI                                                         &kp RALT               &smart_layer SYMB BSPC &mo NAV
                                                                                            &mkp LCLK              &mkp RCLK
            >;
        };

        /* Numbers, F-keys and math */
        LOWER {
            bindings = <
&kp F1             &kp F2             &kp F3             &kp F4             &kp F5             &kp F6                                                     &kp F7             &kp F8             &kp F9             &kp F10            &kp F11              &kp F12
&kp GRAVE          &kp EXCL           &kp AT             &kp HASH           &kp DLLR           &kp PRCNT                                                  &kp CARET          &kp N7             &kp N8             &kp N9             &kp PLUS             &kp STAR
&trans             &hml LGUI AMPS     &hml LALT LPAR     &hml LCTRL RPAR    &hml LSHFT UNDER   &kp MINUS                                                  &kp EQUAL          &hmr RSHFT N4      &hmr RCTRL N5      &hmr RALT N6       &hmr RGUI DOT        &kp FSLH
&trans             &kp PIPE           &kp LBKT           &kp RBKT           &kp LBRC           &kp RBRC                                                   &kp N0             &kp N1             &kp N2             &kp N3             &kp COMMA            &trans
                                                         &trans             &trans             &trans                                                     &trans             &kp DEL            &trans
                                                                            &trans             &trans
            >;
        };

        /* Symbols and special keys */
        SYMB {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&kp TILDE          &kp EXCL           &lpar_lt           &rpar_gt           &kp DQT            &kp PIPE                                                   &kp AMPS           &kp UNDER          &kp LBKT           &kp RBKT           &kp PRCNT            &kp BSPC
&kp GRAVE          &hml LGUI AT       &hml LALT MINUS    &hml LCTRL PLUS    &hml LSHFT EQUAL   &kp HASH                                                   &kp PIPE           &hmr RSHFT COLON   &hmr RCTRL LPAR    &hmr RALT RPAR     &hmr RGUI QMARK      &kp SQT
&trans             &kp CARET          &kp FSLH           &kp STAR           &kp BSLH           &none                                                      &kp TILDE          &kp DLLR           &kp LBRC           &kp RBRC           &kp AT               &trans
                                                         &trans             &spc_mod           &trans                                                     &trans             &trans             &trans
                                                                            &trans             &trans
            >;
        };

        /* Navigation, multimedia and system functions */
        NAV {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&kp LA(TAB)        &kp C_PREV         &kp C_PP           &kp C_NEXT         &kp C_VOL_UP       &screenshot                                                &kp PG_UP          &win_left          &kp UP             &win_right         &win_mgmt            &trans
&trans             &hml LGUI HOME     &hml LALT PG_DN    &hml LCTRL PG_UP   &hml LSHFT END     &kp C_VOL_DN                                               &kp PG_DN          &hmr RSHFT LEFT    &hmr RCTRL DOWN    &hmr RALT RIGHT    &hmr RGUI HOME       &trans
&trans             &prev_desktop      &vim_save          &select_word       &next_desktop      &kp C_MUTE                                                 &select_line       &kp HOME           &kp END            &kp INS            &kp DEL              &trans
                                                         &trans             &trans             &trans                                                     &trans             &trans             &trans
                                                                            &trans             &trans
            >;
        };

        /* IDE and programming layer */
        IDE {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&trans             &kp LC(S)          &kp LC(F)          &kp LC(O)          &kp LC(N)          &kp LC(T)                                                  &kp LC(W)          &kp LC(D)          &kp LC(I)          &comment_line      &duplicate_line      &trans
&trans             &hml LGUI LC(A)    &hml LALT LC(V)    &hml LCTRL LC(E)   &hml LSHFT LC(LS(F)) &kp LC(G)                                                &kp LC(LS(N))      &hmr RSHFT LC(B)   &hmr RCTRL LC(R)   &hmr RALT LC(H)    &hmr RGUI LC(L)      &trans
&trans             &indent_line       &outdent_line      &kp LC(LS(J))      &kp LC(LS(K))      &kp LC(LS(C))                                              &kp LC(LS(U))      &kp LC(LS(R))      &kp LC(LS(F))      &kp LC(LS(X))      &kp LC(LS(P))        &trans
                                                         &to BASE           &kp SPACE          &kp LGUI                                                   &kp RALT           &kp BSPC           &to BASE
                                                                            &mkp LCLK          &mkp RCLK
            >;
        };

        /* Settings, Bluetooth and debugging */
        ADJUST {
            bindings = <
&trans             &bt BT_SEL 0       &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4                                               &trans             &trans             &trans             &trans             &trans               &trans
&trans             &bt BT_CLR         &trans             &trans             &trans             &out OUT_TOG                                               &trans             &kp C_VOL_UP       &kp C_MUTE         &kp C_VOL_DN       &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT          &trans               &trans
&trans             &bootloader        &sys_reset         &trans             &trans             &trans                                                     &kp HOME           &kp PG_DN          &kp PG_UP          &kp END            &trans               &trans
                                                         &to BASE           &trans             &trans                                                     &trans             &trans             &to BASE
                                                                            &trans             &trans
            >;
        };

        /* QWERTY layer */
        QWERTY {
            bindings = <
&kp GRAVE          &kp N1             &kp N2             &kp N3             &kp N4             &kp N5                                                     &kp N6             &kp N7             &kp N8             &kp N9             &kp N0               &lock_screen
&tab_esc           &kp Q              &kp W              &kp E              &kp R              &kp T                                                      &kp Y              &kp U              &kp I              &kp O              &kp P                &kp LBKT
&mt LCTRL ESC         &hml LGUI A        &hml LALT S        &hml LCTRL D       &hml LSHFT F       &kp G                                                      &kp H              &hmr RSHFT J       &hmr RCTRL K       &hmr RALT L        &hmr RGUI SEMI       &kp SQT
&dt_shift          &kp Z              &kp X              &kp C              &kp V              &kp B                                                      &kp N              &kp M              &comma_semi        &dot_colon         &slash_qmark         &mt RSHFT ENTER
                                                         &to BASE           &smart_layer LOWER SPACE &kp LGUI                                              &kp RALT           &smart_layer SYMB BSPC &mo NAV
                                                                            &mkp LCLK          &mkp RCLK
            >;
        };

        /* Gaming layer (without home row mods) */
        GAMING {
            bindings = <
&kp GRAVE          &kp N1             &kp N2             &kp N3             &kp N4             &kp N5                                                     &kp N6             &kp N7             &kp N8             &kp N9             &kp N0               &lock_screen
&kp TAB            &kp Q              &kp W              &kp E              &kp R              &kp T                                                      &kp Y              &kp U              &kp I              &kp O              &kp P                &kp LBKT
&kp ESC            &kp A              &kp S              &kp D              &kp F              &kp G                                                      &kp H              &kp J              &kp K              &kp L              &kp SEMI             &kp SQT
&kp LSHFT          &kp Z              &kp X              &kp C              &kp V              &kp B                                                      &kp N              &kp M              &kp COMMA          &kp DOT            &kp SLASH            &kp RSHFT
                                                         &to BASE           &kp SPACE          &kp LCTRL                                                  &kp RALT           &kp BSPC           &kp ENTER
                                                                            &kp LALT           &kp R
            >;
        };

        /* Mouse layer */
        MOUSE {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &mmv MOVE_UP       &trans             &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &mmv MOVE_LEFT     &mmv MOVE_DOWN     &mmv MOVE_RIGHT    &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
                                                         &tog MOUSE         &mkp LCLK          &mkp MCLK                                                  &mkp RCLK          &mkp LCLK          &tog MOUSE
                                                                            &trans             &trans
            >;
        };

        /* Scroll layer */
        SCROLL {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&trans             &trans             &trans             &mwh SCROLL_UP     &trans             &trans                                                     &trans             &trans             &mwh SCROLL_UP     &trans             &trans               &trans
&trans             &trans             &mwh SCROLL_LEFT   &mwh SCROLL_DOWN   &mwh SCROLL_RIGHT  &trans                                                     &trans             &mwh SCROLL_LEFT   &mwh SCROLL_DOWN   &mwh SCROLL_RIGHT  &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
                                                         &tog SCROLL        &mkp LCLK          &mkp MCLK                                                  &mkp RCLK          &mkp LCLK          &tog SCROLL
                                                                            &trans             &trans
            >;
        };

        /* Precision aiming layer (sniper) */
        SNIPE {
            bindings = <
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &mmv MOVE_UP       &trans             &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &mmv MOVE_LEFT     &mmv MOVE_DOWN     &mmv MOVE_RIGHT    &trans               &trans
&trans             &trans             &trans             &trans             &trans             &trans                                                     &trans             &trans             &trans             &trans             &trans               &trans
                                                         &tog SNIPE         &mkp LCLK          &mkp MCLK                                                  &mkp RCLK          &mkp LCLK          &tog SNIPE
                                                                            &trans             &trans
            >;
        };
    };
};

